datasource db {
    provider          = "sqlserver"
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id                 String    @id @default(uuid())
    pubkey             String    @unique
    createdAt          DateTime
    isSystemUser       Boolean?  @default(false)
    fraudReportedAt    DateTime?
    isSystemAgent      Boolean   @default(false)
    subscriptionId     Int       @default(1)
    subscriptionEnd    DateTime?
    lastSeenNip05      String?
    lastSeenNip05At    DateTime?
    lastSeenNip05Event String?   @db.NVarChar(max)

    registrations    Registration[]
    userTokens       UserToken[]
    userLoginCode    UserLoginCode?
    userFraudOptions UserFraudOption[]
    jobs             Job[]

    userLoginNip07Codes UserLoginNip07Code[]
    userLoginNip46Codes UserLoginNip46Code[]
    subscription        Subscription         @relation(fields: [subscriptionId], references: [id])
    userSubscriptions   UserSubscription[]
}

model UserSubscription {
    id                   Int       @id @default(autoincrement())
    userId               String
    createdAt            DateTime
    pending              Boolean
    cancelled            Boolean
    oldSubscriptionId    Int
    newSubscriptionId    Int
    newSubscriptionEnd   DateTime?
    expirationReminder14 DateTime?
    expirationReminder7  DateTime?
    expirationReminder3  DateTime?
    expirationReminder1  DateTime?
    info                 String?

    userSubscriptionInvoice UserSubscriptionInvoice?
    user                    User                     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    oldSubscription         Subscription             @relation(name: "old", fields: [oldSubscriptionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    newSubscription         Subscription             @relation(name: "new", fields: [newSubscriptionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model UserSubscriptionInvoice {
    id                             Int                             @id @default(autoincrement())
    userSubscriptionId             Int                             @unique
    createdAt                      DateTime
    amount                         Int
    description                    String?
    expiresAt                      DateTime
    paymentHash                    String                          @unique
    paymentRequest                 String
    qrCodePng                      String
    qrCodeSvg                      String
    userSubscription               UserSubscription                @relation(fields: [userSubscriptionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userSubscriptionInvoicePayment UserSubscriptionInvoicePayment?
}

model UserSubscriptionInvoicePayment {
    id                        Int                     @id @default(autoincrement())
    userSubscriptionInvoiceId Int                     @unique
    settled                   Boolean?
    settledAt                 DateTime?
    userSubscriptionInvoice   UserSubscriptionInvoice @relation(fields: [userSubscriptionInvoiceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model UserToken {
    id         String   @id @default(uuid())
    userId     String
    deviceId   String
    token      String
    validUntil DateTime

    user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@unique([userId, deviceId])
}

model UserFraudOption {
    id       String   @id @default(uuid())
    userId   String
    createAt DateTime

    user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Registration {
    id                String    @id @default(uuid())
    userId            String
    identifier        String
    createdAt         DateTime
    validUntil        DateTime
    verifiedAt        DateTime?
    nipped            Int       @default(0)
    lastLookupDate    DateTime?
    systemDomainId    Int       @default(1)
    lightningAddress  String?
    emailForwardingOn Boolean?
    emailOut          Boolean   @default(false)
    emailOutSubject   String    @default("Nostr 2 Email")

    user                    User                     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    registrationCode        RegistrationCode?
    registrationRelays      RegistrationRelay[]
    systemDomain            SystemDomain             @relation(fields: [systemDomainId], references: [id])
    registrationLookups     RegistrationLookup[]
    lightningAddressLookups LightningAddressLookup[]
    registrationNip07Code   RegistrationNip07Code?
    registrationNip46Code   RegistrationNip46Code?
    registrationEmailOuts   RegistrationEmailOut[]
    registrationEmailIns    RegistrationEmailIn[]

    @@unique([identifier, systemDomainId])
}

model RegistrationLookup {
    id             Int      @id @default(autoincrement())
    registrationId String
    date           DateTime
    total          Int

    registration Registration @relation(fields: [registrationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model LightningAddressLookup {
    id             Int      @id @default(autoincrement())
    registrationId String
    date           DateTime
    total          Int

    registration Registration @relation(fields: [registrationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model DailyLookup {
    id     Int      @id @default(autoincrement())
    date   DateTime
    nipped Int
}

model RegistrationCode {
    id             String   @id @default(uuid())
    registrationId String   @unique
    code           String
    createdAt      DateTime
    validUntil     DateTime

    registration Registration @relation(fields: [registrationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model RegistrationNip07Code {
    id             String   @id @default(uuid())
    registrationId String   @unique
    code           String
    createdAt      DateTime
    validUntil     DateTime

    registration Registration @relation(fields: [registrationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model RegistrationNip46Code {
    id             String   @id @default(uuid())
    registrationId String   @unique
    code           String
    createdAt      DateTime
    validUntil     DateTime

    registration Registration @relation(fields: [registrationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model RegistrationRelay {
    id             String @id @default(uuid())
    registrationId String
    address        String

    registration Registration @relation(fields: [registrationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model UserLoginCode {
    id         String   @id @default(uuid())
    userId     String   @unique
    code       String
    createdAt  DateTime
    validUntil DateTime

    user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model UserLoginNip07Code {
    id         String   @id @default(uuid())
    userId     String
    deviceId   String
    code       String
    createdAt  DateTime
    validUntil DateTime

    user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@unique([userId, deviceId])
}

model UserLoginNip46Code {
    id         String   @id @default(uuid())
    userId     String
    deviceId   String
    code       String
    createdAt  DateTime
    validUntil DateTime

    user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@unique([userId, deviceId])
}

model SystemUser {
    id               Int               @id
    pubkey           String
    keyvaultKey      String
    nip05            String
    name             String?
    about            String?
    picture          String?
    banner           String?
    lookups          Int
    lastLookupDate   DateTime?
    systemUserRelays SystemUserRelay[]
    systemUserDms    SystemUserDm[]
}

model SystemUserDm {
    id           Int    @id @default(autoincrement())
    systemUserId Int
    eventId      String @unique

    systemUser SystemUser @relation(fields: [systemUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model SystemUserRelay {
    id           Int    @id
    systemUserId Int
    url          String

    systemUser SystemUser @relation(fields: [systemUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model SystemConfig {
    id    Int    @id
    name  String
    value String
}

model SystemBlockedIdentifier {
    id   Int    @id @default(autoincrement())
    name String @unique
}

model SystemDomain {
    id            Int            @id
    name          String
    order         Int
    registrations Registration[]
}

model SystemRelay {
    id       Int     @id
    url      String
    isActive Boolean
}

// StatUsers has to be filled/triggered by "something from outside the Api"
// => Azure Function
model StatUser {
    id    Int      @id @default(autoincrement())
    date  DateTime
    users Int
}

// The JobState describes the state of the job:
// 1: created / queued
// 2: running
// 3: finished
model JobState {
    id   Int    @id
    name String
    jobs Job[]
}

// The JobType describes the nature of the job:
// 1: Nostr Direct Message
// ...
model JobType {
    id   Int    @id
    name String
    jobs Job[]
}

model Job {
    id                String    @id @default(uuid())
    userId            String?
    createdAt         DateTime  @default(now())
    finishedAt        DateTime?
    finishedOk        Boolean?
    message           String?
    durationInSeconds Int?
    jobStateId        Int
    jobTypeId         Int

    user     User?    @relation(fields: [userId], references: [id])
    jobState JobState @relation(fields: [jobStateId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    jobType  JobType  @relation(fields: [jobTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

// kind0 = profile
model NostrEvent {
    id        String @id
    pubkey    String
    createdAt Int
    kind      Int
    value     String @db.NVarChar(max)
}

// EMAIL

model RegistrationEmailIn {
    id             Int          @id @default(autoincrement())
    registrationId String
    date           DateTime
    total          Int
    registration   Registration @relation(fields: [registrationId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@unique([registrationId, date])
}

model RegistrationEmailOut {
    id             Int          @id @default(autoincrement())
    registrationId String
    date           DateTime
    total          Int
    registration   Registration @relation(fields: [registrationId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@unique([registrationId, date])
}

model Email {
    id          Int      @id @default(autoincrement())
    address     String   @unique
    createdAt   DateTime
    keyvaultKey String

    emailNostr EmailNostr?
}

model EmailNostr {
    id             Int       @id @default(autoincrement())
    emailId        Int       @unique
    pubkey         String
    nip05          String
    name           String?
    about          String?
    picture        String?
    banner         String?
    lookups        Int
    lastLookupDate DateTime?

    email              Email               @relation(fields: [emailId], references: [id])
    emailNostrProfiles EmailNostrProfile[]
    emailNostrDms      EmailNostrDm[]
}

model EmailNostrDm {
    id             Int       @id @default(autoincrement())
    emailNostrId   Int
    eventId        String
    eventCreatedAt Int
    sent           DateTime?

    emailNostr EmailNostr @relation(fields: [emailNostrId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model EmailNostrProfile {
    id             Int      @id @default(autoincrement())
    emailNostrId   Int
    publishedAt    DateTime
    publishedRelay String

    emailNostr EmailNostr @relation(fields: [emailNostrId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Subscription {
    id                             Int                @id
    name                           String
    satsPer30Days                  Int
    maxNoOfNostrAddresses          Int
    maxNoOfInboundEmailsPer30Days  Int
    maxNoOfOutboundEmailsPer30Days Int
    users                          User[]
    userOldSubscriptions           UserSubscription[] @relation(name: "old")
    userNewSubscriptions           UserSubscription[] @relation(name: "new")
}

model PublicRelay {
    id        Int      @id @default(autoincrement())
    url       String
    isActive  Boolean
    createdAt DateTime
    notes     String?
}

model BotMetadata {
    id        Int      @id @default(autoincrement())
    createdAt DateTime
    nip05     String
    name      String
    about     String?
    picture   String?
    banner    String?

    botMetadataRelays BotMetadataRelay[]
}

model BotMetadataRelay {
    id            Int      @id @default(autoincrement())
    botMetadataId Int
    publishedAt   DateTime
    url           String

    botMetadata BotMetadata @relation(fields: [botMetadataId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
